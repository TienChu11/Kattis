import java.io.*;
import java.math.BigInteger;
import java.util.StringTokenizer;
import java.util.*;
import java.lang.*;
import java.util.stream.IntStream;
import static java.lang.Math.*;

public class Main extends PrintWriter{
    public Main(InputStream i) {
        super(new BufferedOutputStream(System.out));
        r = new BufferedReader(new InputStreamReader(i));
    }
    public Main(InputStream i, OutputStream o) {
        super(new BufferedOutputStream(o));
        r = new BufferedReader(new InputStreamReader(i));
    }

    public boolean hasMoreTokens() {
        return peekToken() != null;
    }

    public int getInt() {
        return Integer.parseInt(nextToken());
    }

    public double getDouble() {
        return Double.parseDouble(nextToken());
    }

    public long getLong() {
        return Long.parseLong(nextToken());
    }

    public String getWord() {
        return nextToken();
    }



    private BufferedReader r;
    private String line;
    private StringTokenizer st;
    private String token;

    private String peekToken() {
        if (token == null)
            try {
                while (st == null || !st.hasMoreTokens()) {
                    line = r.readLine();
                    if (line == null) return null;
                    st = new StringTokenizer(line);
                }
                token = st.nextToken();
            } catch (IOException e) { }
        return token;
    }

    private String nextToken() {
        String ans = peekToken();
        token = null;
        return ans;
    }

    public static void main(String[] args) {

        Scanner sc = null;
        try{
            sc = new Scanner(System.in);
        }catch (Exception e){ System.out.println(e); }

        int n = sc.nextInt();
        int[] array = new int[n];
        while (n != 0){
            for (int i = 0; i < n; i++) {
                array[i] = sc.nextInt();
            }

            sc.nextLine();
            String line = sc.nextLine();
            StringBuilder builder = new StringBuilder();

            int remainder = line.length() % n;
            remainder = remainder == 0 ? 0 : n - remainder;// remaining spaces


            builder.append(line);
            for (int i = 0; i < remainder; i++) {
                builder.append(' ');
            }

            line = builder.toString();
            builder = new StringBuilder(line.length());
            for (int i = 0; i < line.length() / n; i++) {
                for (int j = 0; j < array.length; j++) {
                    int index = array[j] + i * array.length - 1;
                    builder.append(line.charAt(index));
                }
            }

            System.out.println("\'" + builder.toString() + "\'");
            n = sc.nextInt();
            array = new int[n];
        }
    }
}
