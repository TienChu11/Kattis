import java.io.*;
import java.math.BigInteger;
import java.util.StringTokenizer;
import java.util.*;
import java.lang.*;
import java.util.stream.IntStream;

class Main extends PrintWriter {
    public Main(InputStream i) {
        super(new BufferedOutputStream(System.out));
        r = new BufferedReader(new InputStreamReader(i));
    }
    public Main(InputStream i, OutputStream o) {
        super(new BufferedOutputStream(o));
        r = new BufferedReader(new InputStreamReader(i));
    }

    public boolean hasMoreTokens() {
        return peekToken() != null;
    }

    public int getInt() {
        return Integer.parseInt(nextToken());
    }

    public double getDouble() {
        return Double.parseDouble(nextToken());
    }

    public long getLong() {
        return Long.parseLong(nextToken());
    }

    public String getWord() {
        return nextToken();
    }



    private BufferedReader r;
    private String line;
    private StringTokenizer st;
    private String token;

    private String peekToken() {
        if (token == null)
            try {
                while (st == null || !st.hasMoreTokens()) {
                    line = r.readLine();
                    if (line == null) return null;
                    st = new StringTokenizer(line);
                }
                token = st.nextToken();
            } catch (IOException e) { }
        return token;
    }

    private String nextToken() {
        String ans = peekToken();
        token = null;
        return ans;
    }


    public static void main(String[] args) {

        Main sc = null;
        try{
            //sc = new Main(new FileInputStream(new File("./src/" + "in")), System.out);
            sc = new Main(System.in, System.out);
        }catch (Exception e){ System.out.println(e); }

        int N = sc.getInt(), C = sc.getInt();
        Map<Integer, Integer> orders = new TreeMap<>();
        Map<Integer, Integer> frequencies = new TreeMap<>();
        int orderCount = 0;

        for (int i = 0; i < N; i++) {
            int next = sc.getInt();

            // cal the freq
            if(!frequencies.containsKey(next)) {
                frequencies.put(next, 1);
            }else{
                frequencies.put(next, frequencies.get(next) + 1);
            }

            // cal the order
            if(!orders.containsKey(next)){
                orders.put(next, orderCount);
                orderCount++;
            }
        }

        StringBuilder output = new StringBuilder("");
        Map<Integer, Integer> sortedMap = sortByValue(frequencies, orders);
        for(Map.Entry mapElement : sortedMap.entrySet()){
            int key = (int) mapElement.getKey();
            int value = (int) mapElement.getValue();
            for(int i = 0; i < value; i++){
                output.append(key + " ");
            }
        }
        sc.println(output.toString().trim());

        sc.flush();

    }

    public static Map<Integer, Integer> sortByValue(
            Map<Integer, Integer> unsortedMap,
            Map<Integer, Integer> orderMap
    ){
        List<Map.Entry<Integer, Integer>> list =
                new LinkedList<Map.Entry<Integer, Integer>>(unsortedMap.entrySet());

        Collections.sort(list, new Comparator<Map.Entry<Integer, Integer>>() {
            @Override
            public int compare(Map.Entry<Integer, Integer> o1, Map.Entry<Integer, Integer> o2) {
                if(o2.getValue() - o1.getValue() != 0) return o2.getValue() - o1.getValue();
                return orderMap.get(o1.getKey()) - orderMap.get(o2.getKey());
            }
        });

        Map<Integer, Integer> sortedMap = new LinkedHashMap<Integer, Integer>();
        for(Map.Entry<Integer, Integer> entry : list){
            sortedMap.put(entry.getKey(), entry.getValue());
        }

        return sortedMap;
    }
}