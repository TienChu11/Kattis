import java.io.*;
import java.math.BigInteger;
import java.util.StringTokenizer;
import java.util.*;
import java.lang.*;
import java.util.stream.IntStream;

class Main extends PrintWriter {
    public Main(InputStream i) {
        super(new BufferedOutputStream(System.out));
        r = new BufferedReader(new InputStreamReader(i));
    }
    public Main(InputStream i, OutputStream o) {
        super(new BufferedOutputStream(o));
        r = new BufferedReader(new InputStreamReader(i));
    }

    public boolean hasMoreTokens() {
        return peekToken() != null;
    }

    public int getInt() {
        return Integer.parseInt(nextToken());
    }

    public double getDouble() {
        return Double.parseDouble(nextToken());
    }

    public long getLong() {
        return Long.parseLong(nextToken());
    }

    public String getWord() {
        return nextToken();
    }



    private BufferedReader r;
    private String line;
    private StringTokenizer st;
    private String token;

    private String peekToken() {
        if (token == null)
            try {
                while (st == null || !st.hasMoreTokens()) {
                    line = r.readLine();
                    if (line == null) return null;
                    st = new StringTokenizer(line);
                }
                token = st.nextToken();
            } catch (IOException e) { }
        return token;
    }

    private String nextToken() {
        String ans = peekToken();
        token = null;
        return ans;
    }


    public static void main(String[] args) {

        Main sc = null;
        try{
            sc = new Main(System.in, System.out);
        }catch (Exception e){ System.out.println(e); }

        int numInstruct = sc.getInt();
        while (numInstruct != 0){
            StringBuilder string = new StringBuilder("????????????????????????????????");
            int length = string.length();

            for (int i = 0; i < numInstruct; i++) {
                String instruction = sc.getWord();
                int a = 0;
                int b = 0;
                char atA;
                char atB;
                if(instruction.equals("SET")){
                    a = sc.getInt();
                    string.setCharAt(a, '1');
                }else if(instruction.equals("CLEAR")){
                    a = sc.getInt();
                    string.setCharAt(a, '0');
                }else if(instruction.equals("AND")){
                    a = sc.getInt();
                    b = sc.getInt();

                    atA = string.charAt(a);
                    atB = string.charAt(b);

                    string.setCharAt(a, and(atA, atB));
                }else if(instruction.equals("OR")){
                    a = sc.getInt();
                    b = sc.getInt();

                    atA = string.charAt(a);
                    atB = string.charAt(b);

                    string.setCharAt(a, or(atA, atB));
                }
            }

            sc.println(string.reverse().toString());
            numInstruct = sc.getInt();
        }


        sc.flush();

    }

    public static char and(char a, char b){
        char result = '?';

        if(a == '?' || b == '?') return andQ(a, b);

        if(a == '1' && b == '1') result = '1';
        else result = '0';

        return result;
    }

    public static char andQ(char a, char b){
        char result = '?';

        if(a == '?' && b == '?') return '?';
        else if(a == '0' || b == '0') return '0';
        else if(a == '1' || b == '1') return '?';

        return result;
    }

    public static char or(char a, char b){
        char result = '?';

        if(a == '?' || b == '?') return orQ(a, b);

        if(a == '0' && b == '0') return '0';
        else result = '1';

        return result;
    }

    public static char orQ(char a, char b){
        char result = '?';

        if(a == '?' && b == '?') return '?';
        else if(a == '0' || b == '0') return '?';
        else if(a == '1' || b == '1') return '1';

        return result;
    }
}