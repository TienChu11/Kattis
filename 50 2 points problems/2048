/** Simple yet moderately fast I/O routines.
 *
 * Example usage:
 *
 * Kattio io = new Kattio(System.in, System.out);
 *
 * while (io.hasMoreTokens()) {
 *    int n = io.getInt();
 *    double d = io.getDouble();
 *    double ans = d*n;
 *
 *    io.println("Answer: " + ans);
 * }
 *
 * io.close();
 *
 *
 * Some notes:
 *
 * - When done, you should always do io.close() or io.flush() on the
 *   Kattio-instance, otherwise, you may lose output.
 *
 * - The getInt(), getDouble(), and getLong() methods will throw an
 *   exception if there is no more data in the input, so it is generally
 *   a good idea to use hasMoreTokens() to check for end-of-file.
 *
 * @author: Kattis
 */

import java.io.*;
import java.math.BigInteger;
import java.util.StringTokenizer;
import java.util.*;
import java.lang.*;
import java.util.stream.IntStream;

class Main extends PrintWriter {
    public Main(InputStream i) {
        super(new BufferedOutputStream(System.out));
        r = new BufferedReader(new InputStreamReader(i));
    }
    public Main(InputStream i, OutputStream o) {
        super(new BufferedOutputStream(o));
        r = new BufferedReader(new InputStreamReader(i));
    }

    public boolean hasMoreTokens() {
        return peekToken() != null;
    }

    public int getInt() {
        return Integer.parseInt(nextToken());
    }

    public double getDouble() {
        return Double.parseDouble(nextToken());
    }

    public long getLong() {
        return Long.parseLong(nextToken());
    }

    public String getWord() {
        return nextToken();
    }



    private BufferedReader r;
    private String line;
    private StringTokenizer st;
    private String token;

    private String peekToken() {
        if (token == null)
            try {
                while (st == null || !st.hasMoreTokens()) {
                    line = r.readLine();
                    if (line == null) return null;
                    st = new StringTokenizer(line);
                }
                token = st.nextToken();
            } catch (IOException e) { }
        return token;
    }

    private String nextToken() {
        String ans = peekToken();
        token = null;
        return ans;
    }


    public static void main(String[] args) {

        Main sc = null;
        try{
            //sc = new Main(new FileInputStream(new File("./src/" + "in")), System.out);
            sc = new Main(System.in, System.out);
        }catch (Exception e){ System.out.println(e); }

        int[][] board = new int[4][4];
        for (int j = 3; j >= 0; j--) {
            for (int i = 0; i < 4; i++) {
                board[i][j] = sc.getInt();
            }
        }
        /**
         * | 2 0 0 2 |
         * |4 16 8 2 |
         * |2 64 32 4 |
         * |1024 1024 64 0 |
         * board[0][0] = 1024
         * i is x
         * j is y
         * */
        int dir = sc.getInt();
        if(dir == 0){//left
            for(int j = 0; j < 4; j++){//add on every row
                for (int i = 0; i < 4; i++) {// every cells
                    int current = board[i][j];
                    for (int k = i + 1; k < 4; k++) {// every cell to right of it
                        if(board[k][j] == 0) continue;
                        if(board[k][j] == current){
                            board[i][j] = current * 2;
                            board[k][j] = 0;

                            if(k < 3){
                                current = board[k+1][j];
                            }
                            break;
                        }else{ // two cells are of different values
                            current = board[k][j];
                            break;
                        }
                    }
                }
            }

            // relocate  to replace middle zeroes
            for (int j = 0; j < 4; j++) {//every row
                int[] values = new int[4];
                int count = 0;
                for (int i = 0; i < 4; i++) {// take none zeroes to values
                    if(board[i][j] != 0) {
                        values[count] = board[i][j];
                        count++;
                    }
                }
                for (int i = 0; i < 4; i++) {// refill to current row
                    board[i][j] = values[i];
                }
            }

        }else if(dir == 1){//up

            for(int i = 0; i < 4; i++){//add on every column
                for (int j = 0; j < 4; j++) {// every cells
                    int current = board[i][j];
                    for (int k = j + 1; k < 4; k++) {// every cell on top of it
                        if(board[i][k] == 0) continue;
                        if(board[i][k] == current){
                            board[i][j] = current * 2;
                            board[i][k] = 0;

                            if(k < 3){
                                current = board[k+1][j];
                            }
                            break;
                        }else{ // two cells are of different values
                            current = board[i][k];
                            break;
                        }
                    }
                }
            }

            // relocate  to replace middle zeroes
            for (int i = 0; i < 4; i++) {//every column
                int[] values = new int[4];
                int count = 0;
                for (int j = 3; j >= 0; j--) {// take none zeroes to values
                    if(board[i][j] != 0) {
                        values[count] = board[i][j];
                        count++;
                    }
                }
                for (int j = 0; j < 4; j++) {// refill to current column
                    board[i][j] = values[3 - j];
                }
            }

        }else if(dir == 2){//right

            for(int j = 0; j < 4; j++){//add on every row
                for (int i = 3; i >= 0; i--) {// every cells
                    int current = board[i][j];
                    for (int k = i - 1; k >= 0; k--) {// every cell to left of it
                        if(board[k][j] == 0) continue;
                        if(board[k][j] == current){
                            board[i][j] = current * 2;
                            board[k][j] = 0;

                            if(k > 0){
                                current = board[k-1][j];
                            }
                            break;
                        }else{ // two cells are of different values
                            current = board[k][j];
                            break;
                        }
                    }
                }
            }

            // relocate  to replace middle zeroes
            for (int j = 0; j < 4; j++) {//every row
                int[] values = new int[4];
                int count = 0;
                for (int i = 3; i >= 0; i--) {// take none zeroes to values
                    if(board[i][j] != 0) {
                        values[count] = board[i][j];
                        count++;
                    }
                }
                for (int i = 0; i < 4; i++) {// refill to current row
                    board[i][j] = values[3 - i];
                }
            }

        }else{//down

            for(int i = 0; i < 4; i++){//add on every column
                for (int j = 3; j >= 0; j--) {// every cells
                    int current = board[i][j];
                    for (int k = j - 1; k >= 0; k--) {// every cell below it
                        if(board[i][k] == 0) continue;
                        if(board[i][k] == current){
                            board[i][j] = current * 2;
                            board[i][k] = 0;

                            if(k > 0){
                                current = board[i][k-1];
                            }
                            break;
                        }else{ // two cells are of different values
                            current = board[i][k];
                            break;
                        }
                    }
                }
            }

            // relocate  to replace middle zeroes
            for (int i = 0; i < 4; i++) {//every column
                int[] values = new int[4];
                int count = 0;
                for (int j = 0; j < 4; j++) {// take none zeroes to values
                    if(board[i][j] != 0) {
                        values[count] = board[i][j];
                        count++;
                    }
                }
                for (int j = 0; j < 4; j++) {// refill to current column
                    board[i][j] = values[j];
                }
            }

        }

        for (int j = 3; j >= 0; j--) {
            for (int i = 0; i < 4; i++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }

        sc.flush();

    }
}