/** Simple yet moderately fast I/O routines.
 *
 * Example usage:
 *
 * Kattio io = new Kattio(System.in, System.out);
 *
 * while (io.hasMoreTokens()) {
 *    int n = io.getInt();
 *    double d = io.getDouble();
 *    double ans = d*n;
 *
 *    io.println("Answer: " + ans);
 * }
 *
 * io.close();
 *
 *
 * Some notes:
 *
 * - When done, you should always do io.close() or io.flush() on the
 *   Kattio-instance, otherwise, you may lose output.
 *
 * - The getInt(), getDouble(), and getLong() methods will throw an
 *   exception if there is no more data in the input, so it is generally
 *   a good idea to use hasMoreTokens() to check for end-of-file.
 *
 * @author: Kattis
 */

import java.io.*;
import java.math.BigInteger;
import java.util.StringTokenizer;
import java.util.*;
import java.lang.*;
import java.util.stream.IntStream;

class Main extends PrintWriter {
    public Main(InputStream i) {
        super(new BufferedOutputStream(System.out));
        r = new BufferedReader(new InputStreamReader(i));
    }
    public Main(InputStream i, OutputStream o) {
        super(new BufferedOutputStream(o));
        r = new BufferedReader(new InputStreamReader(i));
    }

    public boolean hasMoreTokens() {
        return peekToken() != null;
    }

    public int getInt() {
        return Integer.parseInt(nextToken());
    }

    public double getDouble() {
        return Double.parseDouble(nextToken());
    }

    public long getLong() {
        return Long.parseLong(nextToken());
    }

    public String getWord() {
        return nextToken();
    }



    private BufferedReader r;
    private String line;
    private StringTokenizer st;
    private String token;

    private String peekToken() {
        if (token == null)
            try {
                while (st == null || !st.hasMoreTokens()) {
                    line = r.readLine();
                    if (line == null) return null;
                    st = new StringTokenizer(line);
                }
                token = st.nextToken();
            } catch (IOException e) { }
        return token;
    }

    private String nextToken() {
        String ans = peekToken();
        token = null;
        return ans;
    }


    public static void main(String[] args) {

        // initialize scanner
        Main sc = null;
        try{
            //sc = new Main(new FileInputStream(new File("./src/" + "in")), System.out);
            sc = new Main(System.in, System.out);
        }catch (Exception e){ System.out.println(e); }

        int input = sc.getInt();
        if(input == 1 || input == 0){
            sc.println(0);
            sc.flush();
            System.exit(0);
        }

        BigInteger result = new BigInteger("0");
        for(int i = 2; i <= input; i++){
            BigInteger sum = combination(i, input);
            result = result.add(combination(i, input));
        }

        sc.println(result);

        sc.flush();

    }

    public static BigInteger combination(int r, int n){
        if(r == n) return new BigInteger("1");
        BigInteger facRtoN = new BigInteger("1");
        for (int i = r; i < n; i++) {
            facRtoN = facRtoN.multiply(BigInteger.valueOf(i + 1));
        }
        BigInteger facNmR = new BigInteger("1");
        for (int i = 0; i < (n - r); i++) {
            facNmR = facNmR.multiply(BigInteger.valueOf(i + 1));
        }

        BigInteger result = facRtoN.divide(facNmR);
        return result;
    }
}