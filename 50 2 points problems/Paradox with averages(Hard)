import java.io.*;
import java.math.BigInteger;
import java.util.StringTokenizer;
import java.util.*;
import java.lang.*;
import java.util.stream.IntStream;
import static java.lang.Math.*;

public class Main extends PrintWriter{
    public Main(InputStream i) {
        super(new BufferedOutputStream(System.out));
        r = new BufferedReader(new InputStreamReader(i));
    }
    public Main(InputStream i, OutputStream o) {
        super(new BufferedOutputStream(o));
        r = new BufferedReader(new InputStreamReader(i));
    }

    public boolean hasMoreTokens() {
        return peekToken() != null;
    }

    public int getInt() {
        return Integer.parseInt(nextToken());
    }

    public double getDouble() {
        return Double.parseDouble(nextToken());
    }

    public long getLong() {
        return Long.parseLong(nextToken());
    }

    public String getWord() {
        return nextToken();
    }



    private BufferedReader r;
    private String line;
    private StringTokenizer st;
    private String token;

    private String peekToken() {
        if (token == null)
            try {
                while (st == null || !st.hasMoreTokens()) {
                    line = r.readLine();
                    if (line == null) return null;
                    st = new StringTokenizer(line);
                }
                token = st.nextToken();
            } catch (IOException e) { }
        return token;
    }

    private String nextToken() {
        String ans = peekToken();
        token = null;
        return ans;
    }

    public static void main(String[] args) {

        Main sc = null;
        try{
            sc = new Main(System.in, System.out);
        }catch (Exception e){ System.out.println(e); }

        int testCases = sc.getInt();
        for (int i = 0; i < testCases; i++) {
            int Ncs = sc.getInt();
            int Ne = sc.getInt();

            int result = 0;

            double[] csIQ = new double[Ncs];
            double[] eIQ = new double[Ne];

            for (int j = 0; j < Ncs; j++) {
                csIQ[j] = sc.getDouble();
            }

            for (int j = 0; j < Ne; j++) {
                eIQ[j] = sc.getDouble();
            }

            double sumCS = Arrays.stream(csIQ).sum();
            double sumE = Arrays.stream(eIQ).sum();

            double averageCS = (double) sumCS / Ncs;
            double averageE = (double) sumE / Ne;

            for (int j = 0; j < Ncs; j++) {
                double tempSumCs = sumCS - csIQ[j];
                double tempSumE = sumE + csIQ[j];

                double tempAverageCs = (double) tempSumCs / (Ncs - 1);
                double tempAverageE = (double) tempSumE / (Ne + 1);

                if(tempAverageCs > averageCS && tempAverageE > averageE) result++;
            }

            sc.println(result);
        }

        sc.flush();
    }
}