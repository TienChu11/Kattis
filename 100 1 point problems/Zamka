/** Simple yet moderately fast I/O routines.
 *
 * Example usage:
 *
 * Kattio io = new Kattio(System.in, System.out);
 *
 * while (io.hasMoreTokens()) {
 *    int n = io.getInt();
 *    double d = io.getDouble();
 *    double ans = d*n;
 *
 *    io.println("Answer: " + ans);
 * }
 *
 * io.close();
 *
 *
 * Some notes:
 *
 * - When done, you should always do io.close() or io.flush() on the
 *   Kattio-instance, otherwise, you may lose output.
 *
 * - The getInt(), getDouble(), and getLong() methods will throw an
 *   exception if there is no more data in the input, so it is generally
 *   a good idea to use hasMoreTokens() to check for end-of-file.
 *
 * @author: Kattis
 */

import java.io.*;
import java.util.StringTokenizer;
import java.util.*;
import java.lang.*;
import java.util.stream.IntStream;

class Main extends PrintWriter {
    public Main(InputStream i) {
        super(new BufferedOutputStream(System.out));
        r = new BufferedReader(new InputStreamReader(i));
    }
    public Main(InputStream i, OutputStream o) {
        super(new BufferedOutputStream(o));
        r = new BufferedReader(new InputStreamReader(i));
    }

    public boolean hasMoreTokens() {
        return peekToken() != null;
    }

    public int getInt() {
        return Integer.parseInt(nextToken());
    }

    public double getDouble() {
        return Double.parseDouble(nextToken());
    }

    public long getLong() {
        return Long.parseLong(nextToken());
    }

    public String getWord() {
        return nextToken();
    }



    private BufferedReader r;
    private String line;
    private StringTokenizer st;
    private String token;

    private String peekToken() {
        if (token == null)
            try {
                while (st == null || !st.hasMoreTokens()) {
                    line = r.readLine();
                    if (line == null) return null;
                    st = new StringTokenizer(line);
                }
                token = st.nextToken();
            } catch (IOException e) { }
        return token;
    }

    private String nextToken() {
        String ans = peekToken();
        token = null;
        return ans;
    }


    public static void main(String[] args) {
        Main sc = null;
        try{
            //sc = new Main(new FileInputStream(new File("./src/" + "in")), System.out);
            sc = new Main(System.in, System.out);

        }catch (Exception e){
            System.out.println(e);
        }

        int L = sc.getInt(), D = sc.getInt(), n = 0, m = 0, X = sc.getInt(), sum = 0;
        for(int i = L; i <= D; i++){
            int next = i;
            while(next != 0){
                sum += next % 10;
                next /= 10;
            }
            if(sum == X) {
                n = i;
                L = i + 1;
                break;
            }
            sum = 0;
        }

        sum = 0;
        for(int i = L; i <= D; i++){
            int next = i;
            while(next != 0){
                sum += next % 10;
                next /= 10;
            }
            if(sum == X) {
                m = i;
                L = i + 1;
            }
            sum = 0;
        }


        if(n != 0 && m == 0) m = n;
        sc.println(n + "\n" + m);
        sc.flush();
    }
}