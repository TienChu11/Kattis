import java.io.*;
import java.math.BigInteger;
import java.util.StringTokenizer;
import java.util.*;
import java.lang.*;
import java.util.stream.IntStream;
import static java.lang.Math.*;

class Main extends PrintWriter{
    public Main(InputStream i) {
        super(new BufferedOutputStream(System.out));
        r = new BufferedReader(new InputStreamReader(i));
    }
    public Main(InputStream i, OutputStream o) {
        super(new BufferedOutputStream(o));
        r = new BufferedReader(new InputStreamReader(i));
    }

    public boolean hasMoreTokens() {
        return peekToken() != null;
    }

    public int getInt() {
        return Integer.parseInt(nextToken());
    }

    public double getDouble() {
        return Double.parseDouble(nextToken());
    }

    public long getLong() {
        return Long.parseLong(nextToken());
    }

    public String getWord() {
        return nextToken();
    }



    private BufferedReader r;
    private String line;
    private StringTokenizer st;
    private String token;

    private String peekToken() {
        if (token == null)
            try {
                while (st == null || !st.hasMoreTokens()) {
                    line = r.readLine();
                    if (line == null) return null;
                    st = new StringTokenizer(line);
                }
                token = st.nextToken();
            } catch (IOException e) { }
        return token;
    }

    private String nextToken() {
        String ans = peekToken();
        token = null;
        return ans;
    }

    public static void main(String[] args) {
        long start = System.currentTimeMillis();
        long beforeUsedMem=Runtime.getRuntime().totalMemory()-Runtime.getRuntime().freeMemory();
        //-----------------------------

        Main sc = null;
        try{
            sc = new Main(new FileInputStream(new File("./src/" + "in")), System.out);
            //sc = new Main(System.in, System.out);
            //sc = new Scanner(new File("./src/in"));
            //sc = new Scanner(new File("./src/in"));
        }catch (Exception e){ System.out.println(e); }

        int N = sc.getInt();
        int sum = 0;
        for (int i = 0; i < N; i++) {
            String next = sc.getWord().toLowerCase();
            if(next.contains("pink") || next.contains("rose")){
                sum++;
            }
        }

        if(sum != 0){
            sc.println(sum);
        }else {
            sc.println("I must watch Star Wars with my daughter");
        }


        sc.flush();



        //-----------------------------
        long end = System.currentTimeMillis();
        long elapsedTime = end - start;
        long afterUsedMem=Runtime.getRuntime().totalMemory()-Runtime.getRuntime().freeMemory();
        System.out.println("-----------------------------");
        System.out.println("Time elapsed = " + elapsedTime);
        System.out.println("Memory used = " + (double)afterUsedMem / 1000000);

    }
}

