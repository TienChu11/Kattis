import java.io.*;
import java.util.StringTokenizer;
import java.util.*;
import java.lang.*;
import java.util.stream.IntStream;

class Main extends PrintWriter {
    public Main(InputStream i) {
        super(new BufferedOutputStream(System.out));
        r = new BufferedReader(new InputStreamReader(i));
    }
    public Main(InputStream i, OutputStream o) {
        super(new BufferedOutputStream(o));
        r = new BufferedReader(new InputStreamReader(i));
    }

    public boolean hasMoreTokens() {
        return peekToken() != null;
    }

    public int getInt() {
        return Integer.parseInt(nextToken());
    }

    public double getDouble() {
        return Double.parseDouble(nextToken());
    }

    public long getLong() {
        return Long.parseLong(nextToken());
    }

    public String getWord() {
        return nextToken();
    }



    private BufferedReader r;
    private String line;
    private StringTokenizer st;
    private String token;

    private String peekToken() {
        if (token == null)
            try {
                while (st == null || !st.hasMoreTokens()) {
                    line = r.readLine();
                    if (line == null) return null;
                    st = new StringTokenizer(line);
                }
                token = st.nextToken();
            } catch (IOException e) { }
        return token;
    }

    private String nextToken() {
        String ans = peekToken();
        token = null;
        return ans;
    }


    public static void main(String[] args) {
        Main sc = null;
        try{
        //sc = new Main(new FileInputStream(new File("./src/" + "in")), System.out);
            sc = new Main(System.in, System.out);

        }catch (Exception e){
            System.out.println(e);
        }

        int s = sc.getInt(), t = sc.getInt(), n = sc.getInt();
        int[] walks = new int[n+1];
        int[] drives = new int[n];
        int[] arr = new int[n];
        // get walks

        for(int i = 0; i < n + 1; i++){
            walks[i] = sc.getInt();
        }
        for(int i = 0; i < n; i++){
            drives[i] = sc.getInt();

        }
        for(int i = 0; i < n; i++){
            arr[i] = sc.getInt();
        }

        int sum = 0;
        for(int i = 0; i < walks.length - 1; i++){
            sum += walks[i];
            int diff = sum % arr[i];
            diff = diff == 0 ? 0 : arr[i] - diff;
            sum += diff + drives[i];

        }
        sum += walks[walks.length - 1];

        if(sum > t){
            sc.println("no");
        }else{
            sc.println("yes");
        }
        sc.flush();
    }
}