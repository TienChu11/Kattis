import java.io.*;
import java.math.BigInteger;
import java.util.StringTokenizer;
import java.util.*;
import java.lang.*;
import java.util.stream.IntStream;
import static java.lang.Math.*;

class Main extends PrintWriter{
    public Main(InputStream i) {
        super(new BufferedOutputStream(System.out));
        r = new BufferedReader(new InputStreamReader(i));
    }
    public Main(InputStream i, OutputStream o) {
        super(new BufferedOutputStream(o));
        r = new BufferedReader(new InputStreamReader(i));
    }

    public boolean hasMoreTokens() {
        return peekToken() != null;
    }

    public int getInt() {
        return Integer.parseInt(nextToken());
    }

    public double getDouble() {
        return Double.parseDouble(nextToken());
    }

    public long getLong() {
        return Long.parseLong(nextToken());
    }

    public String getWord() {
        return nextToken();
    }



    private BufferedReader r;
    private String line;
    private StringTokenizer st;
    private String token;

    private String peekToken() {
        if (token == null)
            try {
                while (st == null || !st.hasMoreTokens()) {
                    line = r.readLine();
                    if (line == null) return null;
                    st = new StringTokenizer(line);
                }
                token = st.nextToken();
            } catch (IOException e) { }
        return token;
    }

    private String nextToken() {
        String ans = peekToken();
        token = null;
        return ans;
    }

    public static void main(String[] args) {
        Main sc = null;
        try{
            sc = new Main(System.in, System.out);
        }catch (Exception e){ System.out.println(e); }

        int cases = sc.getInt();
        for (int i = 0; i < cases; i++) {
            String nextWord = sc.getWord();
            int length = nextWord.length();

            int square = (int) ceil(sqrt(length));

            char[][] map = new char[square][square];
            int count = 0;

            for (int Y = square - 1; Y >= 0; Y--) { // Y from square to 0
                for (int X = 0; X < square; X++) { // X from 0 to square
                    if(count < length) map[Y][X] = nextWord.charAt(count);
                    else map[Y][X] = '*';

                    count++;
                }
            }

            StringBuilder builder = new StringBuilder();
            for (int X = 0; X < square; X++) {
                for (int Y = 0; Y < square; Y++) {
                    if(map[Y][X] == '*') continue;
                    builder.append(map[Y][X]);
                }
            }

            sc.println(builder.toString());
        }

        sc.flush();


    }
}